import 'package:flutter/material.dart';

String _appTheme = "primary";

class ThemeHelper {
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  ThemeData _getThemeData() {
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception("$_appTheme is not found");
    }

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.deepOrange400,
            // width: 1.h,
          ),
          shape: const RoundedRectangleBorder(
              // borderRadius: BorderRadius.circular(10.h),
              ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.yellow900,
          shape: const RoundedRectangleBorder(
              // borderRadius: BorderRadius.circular(15.h),
              ),
          shadowColor: appTheme.black900.withOpacity(0.25),
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.onPrimaryContainer,
      ),
      dividerTheme: DividerThemeData(
        thickness: 2,
        space: 2,
        color: appTheme.deepOrange400,
      ),
    );
  }

  PrimaryColors themeColor() => _getThemeColors();

  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.whiteA70001,
          // fontSize: 13.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray60003,
          // fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          // fontSize: 12.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          // fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          // fontSize: 8.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          // fontSize: 20.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.deepOrange400,
          // fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w900,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          // fontSize: 14.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
      );
}

class ColorSchemes {
  static const primaryColorScheme =  ColorScheme.light(
    // Primary colors
    primary: Color(0X23D9D9D9),
    primaryContainer: Color(0XFF204857),
    secondaryContainer: Color(0XFFE7DADA),

    // Error colors
    errorContainer: Color(0XDDFF8545),
    onError: Color(0X63ECEAEA),
    onErrorContainer: Color(0XFF1D1B20),

    // On colors(text colors)
    onPrimary: Color(0XCC2B2B2B),
    onPrimaryContainer: Color(0XFFFFFFFF),
  );
}

class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue500 => const Color(0XFF1EA8E1);
  Color get blue700 => const Color(0XFF107CE0);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD3D3D3);
  Color get blueGray900 => const Color(0XFF213943);

  // Cyan
  Color get cyan500 => const Color(0XFF04CAE5);

  // DeepOrange
  Color get deepOrange200 => const Color(0XFFF7BFA1);
  Color get deepOrange20000 => const Color(0X00FFB086);
  Color get deepOrange400 => const Color(0XFFFB7E3C);
  Color get deepOrange50000 => const Color(0X00FF6A1C);

  // Gray
  Color get gray100 => const Color(0XFFF7F2FA);
  Color get gray10001 => const Color(0XFFF6F6F6);
  Color get gray10002 => const Color(0XFFF7F5F5);
  Color get gray400 => const Color(0XFFB3B3B3);
  Color get gray500 => const Color(0XFF9B9B9B);
  Color get gray50001 => const Color(0XFFA19999);
  Color get gray50002 => const Color(0XFF8F8F8F);
  Color get gray500A8 => const Color(0XA8AEA7A7);
  Color get gray600 => const Color(0XFF8B8383);
  Color get gray60001 => const Color(0XFF727272);
  Color get gray60002 => const Color(0XFF79747E);
  Color get gray60003 => const Color(0XFF757575);
  Color get gray60004 => const Color(0XFF6F6E6E);
  Color get gray60005 => const Color(0XFF7F7979);
  Color get gray700 => const Color(0XFF615E5E);
  Color get gray70001 => const Color(0XFF5B5B5B);
  Color get gray800 => const Color(0XFF444040);
  Color get gray900 => const Color(0XFF1E1E1E);

  // Red
  Color get red100 => const Color(0XFFFEDFCD);
  Color get red500 => const Color(0XFFFD3D45);

  // White
  Color get whiteA700 => const Color(0XFFFFFCFC);
  Color get whiteA70001 => const Color(0XFFFFFDFD);

  // Yellow
  Color get yellow900 => const Color(0XFFF16E29);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
